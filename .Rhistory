depth=tmp[,3]
annotationPKG='org.Hs.eg.db'
suppressMessages(library(org.Hs.eg.db))
ls("package:org.Hs.eg.db")
tmp=unlist(as.list(org.Hs.egSYMBOL))
EG2Symbol=data.frame(EGID=names(tmp),symbol=as.character(tmp))
tmp=unlist(as.list(org.Hs.egENSEMBL))
EG2ENSEMBL=data.frame(EGID=names(tmp),ENSEMBL=as.character(tmp))
tmp=unlist(as.list(org.Hs.egGENENAME))
EG2name=data.frame(EGID=names(tmp),name=as.character(tmp))
tmp=unlist(as.list(org.Hs.egMAP))
EG2MAP=data.frame(EGID=names(tmp),MAP=as.character(tmp))
###EG2GO and    using mySQL
EG2path=as.list(org.Hs.egPATH)
EG2path=lapply(EG2path, function(x) paste(x,collapse = ":"))
tmp=unlist(EG2path)
EG2path=data.frame(EGID=names(tmp),path=as.character(tmp))
#as.list(head(org.Hs.egGO2ALLEGS))
GO2allEG=as.list(org.Hs.egGO2ALLEGS)
tmp=unlist(GO2allEG)
names(tmp)=substring(names(tmp),1,10) ## change GO:0000002.IMP to GO:0000002
EG2allGO <- tapply(tmp,tmp,function(x){names(x)})
EG2allGO=lapply(EG2allGO, function(x) paste(x,collapse = ":"))
tmp=unlist(EG2allGO)
EG2GO=data.frame(EGID=names(tmp),GO=as.character(tmp))
tmp=merge(EG2Symbol,EG2MAP,by='EGID',all=TRUE)
tmp=merge(tmp,EG2ENSEMBL,by='EGID',all=TRUE)
tmp=merge(tmp,EG2path,by='EGID',all=TRUE)
tmp=merge(tmp,EG2name,by='EGID',all=TRUE)
my_gene_mapping=merge(tmp,EG2GO,by='EGID',all=TRUE)
View(my_gene_mapping)
suppressMessages(library(RMySQL))
con <- dbConnect(MySQL(), host="127.0.0.1", port=3306, user="root", password="11111111")
dbSendQuery(con, "USE test")
dbWriteTable(con,'my_gene_mapping',my_gene_mapping)
dbDisconnect(con)
head(EG2path)
head(toTable(org.Hs.egPATH))
getwd()
library(RSQLite)
sqlite    <- dbDriver("SQLite")
con <- dbConnect(sqlite,"hg19_bioconductor.sqlite") # makes a new file
suppressMessages(library(org.Hs.eg.db))
kegg2ID=toTable(org.Hs.egPATH)
#[1] "gene_id" "path_id"
dbWriteTable(con,'keggID2geneID',kegg2ID,row.name=F,overwrite=T)
go2id=toTable(org.Hs.egGO2ALLEGS)
## gene_id      go_id Evidence Ontology
dbWriteTable(con,'goID2geneID',go2id,row.name=F,overwrite=T)
library(KEGG.db)
library(GO.db)
#ls("package:KEGG.db")
#ls("package:GO.db")
keggID2name=toTable(KEGGPATHID2NAME)
##[1] "path_id"   "path_name"
dbWriteTable(con,'keggID2name',keggID2name,row.name=F,overwrite=T)
all_go=mappedkeys(GOTERM)
go2name=data.frame(go_id=all_go,term=as.character(Term(all_go)))
dbWriteTable(con,'go2name',go2name,row.name=F,overwrite=T)
suppressMessages(library("org.Hs.eg.db"))
all_EG=mappedkeys(org.Hs.egSYMBOL)
tmp=unlist(as.list(org.Hs.egSYMBOL))
EG2Symbol=data.frame(EGID=names(tmp),symbol=as.character(tmp))
tmp=unlist(as.list(org.Hs.egENSEMBL))
EG2ENSEMBL=data.frame(EGID=names(tmp),ENSEMBL=as.character(tmp))
tmp=unlist(as.list(org.Hs.egGENENAME))
EG2name=data.frame(EGID=names(tmp),name=as.character(tmp))
tmp=unlist(as.list(org.Hs.egMAP))
EG2MAP=data.frame(EGID=names(tmp),MAP=as.character(tmp))
tmp=merge(EG2Symbol,EG2MAP,by='EGID',all=TRUE)
tmp=merge(tmp,EG2ENSEMBL,by='EGID',all=TRUE)
my_gene_mapping=merge(tmp,EG2name,by='EGID',all=TRUE)
##[1] "EGID"    "symbol"  "MAP"     "ENSEMBL" "name"
apply(my_gene_mapping,2,function(x) length(unique(x)))
dbWriteTable(con,'my_gene_mapping',my_gene_mapping,row.name=F,overwrite=T)
dbDisconnect(con)
library(devtools)
options(download.file.method = "wininet")
install_github("genome/bmm")
remove.packages('curl')
install.packages('curl')
install.packages("curl")
install.packages('curl',repos="http://cran.us.r-project.org")
install.packages('httr',repos="http://cran.us.r-project.org")
library(Rcurl)
install_github("genome/bmm")
install.packages("devtools",repos="http://cran.us.r-project.org")
library(gplots)
install.packages("gplots",repos="http://cran.us.r-project.org")
library(gplots)
library("org.Hs.eg.db")
frame = toTable(org.Hs.egGO)
goframeData = data.frame(frame$go_id, frame$Evidence, frame$gene_id)
suppressMessages(library(GOstats))
suppressMessages(library(GSEABase))
suppressMessages(library(optparse))
goFrame=GOFrame(goframeData,organism="Homo sapiens")
goAllFrame=GOAllFrame(goFrame)
a='fef|dfe'
strsplit(a,"|")
strsplit(a,"\|")
strsplit(a,"\\|")
library(Biostrings)
BiocInstaller::biocLite("ArrayExpress")
library("ArrayExpress")
sets = queryAE(keywords = "NASH+expression", species = "homo+sapiens")
View(sets)
back = getAE("E-MEXP-3291")
rawset = ArrayExpress("E-MEXP-3291")
?order
library(DESeq)
library(DESeq2)
library(airway)
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
biocLite("airway")
library(DESeq)
library(DESeq2)
library(airway)
biocLite("DESeq2")
library(DESeq2)
toupper("DESE")
tolower("DEs")
biocLite("pasilla")
library(pasilla)
biocLite("airway")
library(limma)
library("pasilla")
library("Biobase")
data("pasillaGenes")
biocLite("DESeq")
biocLite("DESeq")
exprSet=matrix(rnorm(1200),ncol=6)
DEG_limma <- function(exprSet=exprSet,group_list=group_list){
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=sample_list
fit <- lmFit(exprSet,design)
pnd("MD.png")
plotMD(fit)
dev.off()
#contrastsCommand=unlist(strsplit(comb(unique(groupdata$group)), split=","))
limmaArg=paste(colnames(design),collapse = "-")
contrastsCommand=unlist(strsplit(limmaArg, split=","))
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
}
exprSet=matrix(rnorm(1200),ncol=6)
group_list=c(1,1,1,2,2,2)
DEG_limma()
factor(group_list)
factor(group_list)
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=sample_list
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
fit <- lmFit(exprSet,design)
pnd("MD.png")
plotMD(fit)
dev.off()
png("MD.png")
plotMD(fit)
dev.off()
#contrastsCommand=unlist(strsplit(comb(unique(groupdata$group)), split=","))
limmaArg=paste(colnames(design),collapse = "-")
contrastsCommand=unlist(strsplit(limmaArg, split=","))
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
contrastsCommand
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
design
exprSet=matrix(rnorm(1200),ncol=6)
group_list=c(rep("case",3),rep("control",3))
DEG_limma <- function(exprSet=exprSet,group_list=group_list){
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
fit <- lmFit(exprSet,design)
png("MD.png")
plotMD(fit)
dev.off()
#contrastsCommand=unlist(strsplit(comb(unique(groupdata$group)), split=","))
limmaArg=paste(colnames(design),collapse = "-")
contrastsCommand=unlist(strsplit(limmaArg, split=","))
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
}
DEG_limma()
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
fit <- lmFit(exprSet,design)
png("MD.png")
plotMD(fit)
dev.off()
fit
limmaArg=paste(colnames(design),collapse = "-")
contrastsCommand=unlist(strsplit(limmaArg, split=","))
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
View(nrDEG2)
png("MD.png")
plotMD(fit)
abline(0,0,col="blue")
dev.off()
library(limma)
png("MD.png")
plotMD(fit)
abline(0,0,col="blue")
dev.off()
png("MD.png")
plotMA(fit)
abline(0,0,col="blue")
dev.off()
plotMDS(fit)
DEG_limma <- function(exprSet=exprSet,group_list=group_list){
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
fit <- lmFit(exprSet,design)
png("MA.png")
plotMA(fit)
abline(0,0,col="blue")
dev.off()
#contrastsCommand=unlist(strsplit(comb(unique(groupdata$group)), split=","))
limmaArg=paste(colnames(design),collapse = "-")
contrastsCommand=unlist(strsplit(limmaArg, split=","))
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
}
DEG_limma()
exprSet=matrix(rnorm(1200),ncol=6)
group_list=c(rep("case",3),rep("control",3))
DEG_limma()
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
fit <- lmFit(exprSet,design)
png("MA.png")
plotMA(fit)
abline(0,0,col="blue")
dev.off()
#contrastsCommand=unlist(strsplit(comb(unique(groupdata$group)), split=","))
limmaArg=paste(colnames(design),collapse = "-")
contrastsCommand=unlist(strsplit(limmaArg, split=","))
cont.matrix <- makeContrasts(contrasts=contrastsCommand, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
DEG_limma(exprSet,group_list)
tmp=DEG_limma(exprSet,group_list)
tmp
DEG_limma <- function(exprSet=exprSet,group_list=group_list){
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
fit <- lmFit(exprSet,design)
png("MA.png")
plotMA(fit)
abline(0,0,col="blue")
dev.off()
fit2 <- eBayes(fit)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
}
DEG_results=DEG_limma(exprSet,group_list)
DEG_voom <- function(exprSet=exprSet,group_list=group_list){
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
v <- voom(exprSet,design,normalize="quantile")
png("MA.png")
plotMDS(v, labels=1:ncol(count_matrix),col=rainbow(ncol(count_matrix)))
#abline(0,0,col="blue")
dev.off()
fit <- lmFit(v,design)
fit2 <- eBayes(fit)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
}
DEG_results=DEG_limma(exprSet,group_list)
DEG_results=DEG_voom(exprSet,group_list)
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
v <- voom(exprSet,design,normalize="quantile")
v <- voom(exprSet,design,normalize="quantile")
int(100*rnorm(5))
(100*rnorm(5))
exprSet=matrix(abs(rnorm(1200)),ncol=6)
group_list=c(rep("case",3),rep("control",3))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
v <- voom(exprSet,design,normalize="quantile")
png("MA.png")
plotMDS(v, labels=1:ncol(count_matrix),col=rainbow(ncol(count_matrix)))
#abline(0,0,col="blue")
dev.off()
fit <- lmFit(v,design)
fit2 <- eBayes(fit)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
png("MA.png")
plotMDS(v, labels=1:ncol(exprSet),col=rainbow(ncol(exprSet)))
#abline(0,0,col="blue")
dev.off()
fit <- lmFit(v,design)
png("MA.png")
plotMA(fit)
abline(0,0,col="blue")
dev.off()
DEG_voom <- function(exprSet=exprSet,group_list=group_list){
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
v <- voom(exprSet,design,normalize="quantile")
png("MDS.png")
plotMDS(v, labels=1:ncol(exprSet),col=rainbow(ncol(exprSet)))
#abline(0,0,col="blue")
dev.off()
fit <- lmFit(v,design)
png("MA.png")
plotMA(fit)
#abline(0,0,col="blue")
dev.off()
fit2 <- eBayes(fit)
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG2 = na.omit(tempOutput)
}
DEG_results=DEG_voom(exprSet,group_list)
View(DEG_results)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
integer(8.88)
floor(0.58)
ceiling(0.25)
ceiling(exprSet)
exprSet=matrix(10*abs(rnorm(1200)),ncol=6)
group_list=c(rep("case",3),rep("control",3))
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
resOrdered
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
rownames(resOrdered)
rownames(exprSet)=1:nrow(exprSet)
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
DEG_results=DEG_DESeq2(exprSet,group_list)
DEG_DESeq2 <- function(exprSet=exprSet,group_list=group_list){
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
}
DEG_results=DEG_DESeq2(exprSet,group_list)
exprSet=matrix(10*abs(rnorm(1200)),ncol=6)
rownames(exprSet)=1:nrow(exprSet)
group_list=c(rep("case",3),rep("control",3))
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
res
DEG_DESeq2 <- function(exprSet=exprSet,group_list=group_list){
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
}
DEG_results=DEG_DESeq2(exprSet,group_list)
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
res <- results(dds)
png("MA.png")
plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
DEG_DESeq2 <- function(exprSet=exprSet,group_list=group_list){
exprSet=ceiling(exprSet)
(colData <- data.frame(row.names=colnames(exprSet), group_list=group_list))
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
dds <- DESeq(dds)
res <- results(dds)
png("MA.png")
#plotMA(res, main="DESeq2", ylim=c(-2,2))
dev.off()
resOrdered <- res[order(res$padj),]
resOrdered=cbind(symbol=rownames(resOrdered),as.data.frame(resOrdered))
}
DEG_results=DEG_DESeq2(exprSet,group_list)
View(DEG_results)
biocLite("edgeR")
biocLite("edgeR")
install.packages("compiper",repos = "http://cran.us.r-project.org")
library(devtools)
devtools::install_github('rstudio/rsconnect')
library(curl)
install.packages("curl")
library(curl)
devtools::install_github('rstudio/rsconnect')
install.packages("Rcurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl",repos="http://cran.us.r-project.org")
library(devtools)
install_github("genome/bmm")
install.packages("digest")
install.packages("digest",repos="http://cran.us.r-project.org")
library(devtools)
install_github("genome/bmm")
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
library(shiny)
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
?imageOutput
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
rsconnect::setAccountInfo(name='jmzeng',
token='9983A1BDA2171A8F11E4ED93328C3979',
secret='<SECRET>')
library(devtools)
install_github("genome/bmm")
library(devtools)
install_github("genome/bmm")
