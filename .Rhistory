exprSet=countData
group_list=colData$condition
n.sample=ncol(exprSet)
if(n.sample>40) par(cex = 0.5)
cols <- rainbow(n.sample*1.2)     #rainbow是R的一个函数，用于产生彩虹色
boxplot(exprSet, col = cols, xlab="Sample", ylab="Log intensity")
par(cex = 0.7)
n.sample=ncol(exprSet)
if(n.sample>40) par(cex = 0.5)
cols <- rainbow(n.sample*1.2)     #rainbow是R的一个函数，用于产生彩虹色
boxplot(exprSet, col = cols, xlab="Sample", ylab="expression value")
boxplot(exprSet, col = cols, xlab="Sample", ylab="expression value",las=1)
boxplot(exprSet, col = cols, xlab="Sample", ylab="expression value",y.las=1)
boxplot(exprSet, col = cols, xlab="Sample", ylab="expression value",y.las=2)
boxplot(exprSet, col = cols, xlab="Sample", ylab="expression value",las=2)
cols
boxplot(exprSet, col = cols,ylab="expression value",las=2)
boxplot(exprSet, col = cols,ylog=T,ylab="expression value",las=2)
boxplot(exprSet, col = cols,ylog=T,ylab="expression value",las=2)
boxplot(exprSet, col = cols,xlog=T,ylab="expression value",las=2)
boxplot(log(exprSet), col = cols,ylab="expression value",las=2)
boxplot(log2(exprSet), col = cols,ylab="expression value",las=2)
MAplot(exprSet, cex=0.8)
library(limma)
library(affy)
MAplot(exprSet, cex=0.8)
# Run the DESeq pipeline
dds <- DESeq(dds)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds$condition <- factor(dds$condition,
levels=c("untreated","treated"))
exprSet=countData
group_list=colData$condition
# Run the DESeq pipeline
dds <- DESeq(dds)
plotDispEsts(dds, main="Dispersion plot")
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
boxplot(assay(rld), col = cols,ylab="expression value",las=2)
boxplot(log2(assay(rld)), col = cols,ylab="expression value",las=2)
dds
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds$condition <- factor(dds$condition,
levels=c("untreated","treated"))
rld <- rlogTransformation(dds)
head(assay(rld))
boxplot(assay(rld), col = cols,ylab="expression value",las=2)
hist(exprSet)
hist(log2(exprSet))
par(mfrow=c(2,2))
boxplot(exprSet, col = cols,ylab="expression value",las=2)
boxplot(log2(exprSet), col = cols,ylab="expression value",las=2)
hist(exprSet)
hist(log2(exprSet))
par(mfrow=c(2,2))
boxplot(exprSet, col = cols,main="expression value",las=2)
boxplot(log2(exprSet), col = cols,main="log(expression value)",las=2)
hist(exprSet)
hist(log2(exprSet))
exprSet_bak=exprSet
rld <- rlogTransformation(dds)
exprSet=assay(rld)
par(cex = 0.7)
n.sample=ncol(exprSet)
if(n.sample>40) par(cex = 0.5)
cols <- rainbow(n.sample*1.2)     #rainbow是R的一个函数，用于产生彩虹色
par(mfrow=c(2,2))
boxplot(exprSet, col = cols,main="expression value",las=2)
boxplot(log2(exprSet), col = cols,main="log(expression value)",las=2)
hist(exprSet)
hist(log2(exprSet))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(group_list))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(exprSet)))
library(gplots)
?install.packages
install.packages("gplots",repos = "http://cran.us.r-project.org")
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
mycols
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
mycols[group_list]
mycols
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
dev.off()
dev.off()
dev.off()
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
if(n.sample>40) par(cex = 0.5)
cols <- rainbow(n.sample*1.2)     #rainbow是R的一个函数，用于产生彩虹色
par(mfrow=c(2,2))
boxplot(exprSet, col = cols,main="expression value",las=2)
boxplot(exprSet_bak, col = cols,main="log(expression value)",las=2)
hist(exprSet)
hist(exprSet_bak)
exprSet=exprSet_bak
rld <- rlogTransformation(dds)
exprSet_new=assay(rld)
#exprSet_new=log2(exprSet)
par(cex = 0.7)
n.sample=ncol(exprSet)
if(n.sample>40) par(cex = 0.5)
cols <- rainbow(n.sample*1.2)     #rainbow是R的一个函数，用于产生彩虹色
par(mfrow=c(2,2))
boxplot(exprSet, col = cols,main="expression value",las=2)
boxplot(exprSet_new, col = cols,main="expression value",las=2)
hist(exprSet)
hist(exprSet_new)
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(exprSet_new)))
install.packages("gplots",repos = "http://cran.us.r-project.org")
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
install.packages("gplots", repos = "http://cran.us.r-project.org")
sampleDists <- as.matrix(dist(t(exprSet_new)))
#install.packages("gplots",repos = "http://cran.us.r-project.org")
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[group_list], RowSideColors=mycols[group_list],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
dev.off()
DESeq2::plotMA(dds, ylim=c(-1,1), cex=1)
DESeq2::plotMA(dds, ylim=c(-1,1))
dds <- DESeq(dds)
# Plot dispersions
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
DESeq2::plotMA(dds, ylim=c(-1,1))
## MA plot
## Could do with built-in DESeq2 function:
## DESeq2::plotMA(dds, ylim=c(-1,1), cex=1)
## I like mine better:
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()
## Volcano plot with "significant" genes labeled
volcanoplot <- function (res, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(res, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(res, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
dev.off()
?textxy
??textxy
BiocInstaller::biocLite("calibrate")
library(calibrate)
## Volcano plot with "significant" genes labeled
volcanoplot <- function (res, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(res, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(res, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
dev.off()
## I like mine better:
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()
View(resdata)
res
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20 ...))
library(airway)
library(airway)
install.packages("~/R/win-library/airway_0.105.0.tar.gz", repos = NULL, type = "source")
BiocInstaller::biocLite("SummarizedExperiment")
BiocInstaller::biocLite("CLL")
BiocInstaller::biocLite("CLL")
library(CLL)
BiocInstaller::biocLite("airway")
data(sCLLex)
sCLLex
data(CLLbatch)
CLLbatch
data(disease)
diesease
disease
data(nsFilter)
install.packages("Rmarkdown",repos = "http://cran.us.r-project.org")
library(shiny)
?column
install.packages("rmarkdown",repos = "http://cran.us.r-project.org")
?selectInput
setwd("D:\\test_analysis\\my_github\\my-R")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
?tabsetPanel
？dataTableOutput
?dataTableOutput
runApp("8-DEG/")
runApp("8-DEG/")
?verbatimTextOutput
runApp("8-DEG/")
?switch
data(sCLLex)
sCLLex
runApp("8-DEG/")
runApp("8-DEG/")
library(shiny)
library(DESeq)
library(limma)
library(DESeq2)
library(edgeR)
library(baySeq)
library(pasilla)
library(pasilla)
library(Biobase)
#library(airway)
data(pasillaGenes)
data(sCLLex)
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
data(pasillaGenes)
data(sCLLex)
sCLLex
str(sCLLex)
attr(sCLLex)
print(sCLLex)
runApp("8-DEG/")
tmp=print(sCLLex)
tmp
summary(tmp)
cat(tmp)
pasillaGenes
runApp("8-DEG/")
sprintf(pasillaGenes)
print(pasillaGenes)
tmp=print(pasillaGenes)
tmp
?renderDatatable
counts(sCLLex)
pData(sCLLex)
runApp("8-DEG/")
str(sCLLex)
sCLLex@data
sCLLex@assayData
sCLLex@phenoData
as.data.frame(sCLLex@assayData)
as.data.frame(sCCLex)
as.data.frame(sCLLex)
data("sCLLex")
MAplot(sCLLex)
summary(sCLLex)
description(sCLLex)
sampleNames(sCLLex)
data.matrix(sCLLex)
exprs(sCLLex)
runApp("8-DEG/")
exprSet=exprs(sCLLex)
sampleNames(sCLLex)
pData(sCLLex)
sampleNames(sCLLex)
View(exprSet)
sampleNames(pasillaGenes)
pdata=pData(pasillaGenes)[,c("condition","type")]
pdata
exprSet=exprs(sCLLex)
samples=sampleNames(sCLLex)
pdata=pData(sCLLex)
pdata
group_list=pdata[,2]
names(exprSet)
colnames(exprSet)
matrix_a=exprSet[,colnames(exprSet)==unique(group_list)[1]]
matrix_a=exprSet[,colnames(exprSet)==unique(group_list)[1]]
matrix_b=exprSet[,colnames(exprSet)==unique(group_list)[2]]
exprSet=counts(pasillaGenes)
samples=sampleNames(pasillaGenes)
pdata=pData(pasillaGenes)[,c("condition","type")]
group_list=pdata[,2]
group_list
matrix_a=exprSet[,colnames(exprSet)==unique(group_list)[1]]
matrix_b=exprSet[,colnames(exprSet)==unique(group_list)[2]]
View(matrix_a)
View(matrix_b)
head(matrix_a)
head(matrix_b)
group_list=as.charater(pdata[,2])
group_list=as.character(pdata[,2])
matrix_a=exprSet[,colnames(exprSet)==unique(group_list)[1]]
matrix_b=exprSet[,colnames(exprSet)==unique(group_list)[2]]
head(matrix_a)
colnames(exprSet)
unique(group_list)[2]
pdata
pdata=pData(sCLLex)
pdata
exprSet=counts(pasillaGenes)
samples=sampleNames(pasillaGenes)
pdata=pData(pasillaGenes)[,c("condition","type")]
group_list=as.character(pdata[,1])
group_list
group_list==unique(group_list)[1
]
rownames(pdata)[group_list==unique(group_list)[1]]
matrix_a=exprSet[,rownames(pdata)[group_list==unique(group_list)[1]]]
matrix_b=exprSet[,rownames(pdata)[group_list==unique(group_list)[2]]]
View(matrix_a)
View(matrix_a)
runApp("8-DEG/")
pData(sCLLex)
pData(pasillaGenes)
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
group_list
dim(exprSet)
suppressMessages(library(edgeR)
d <- DGEList(counts=exprSet,group=factor(group_list))
d.full <- d # keep the old one in case we mess up
d <- DGEList(counts=exprSet,group=factor(group_list))
d.full <- d # keep the old one in case we mess up
apply(d$counts, 2, sum) # total gene counts per samplekeep <- rowSums(cpm(d)>100) >= 2
d <- d[keep,]
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
d <- DGEList(counts=exprSet,group=factor(group_list))
d.full <- d # keep the old one in case we mess up
#apply(d$counts, 2, sum) # total gene counts per samplekeep <- rowSums(cpm(d)>100) >= 2
keep <- rowSums(cpm(d)>100) >= 2
d <- d[keep,]
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d)
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
d1 <- estimateCommonDisp(d, verbose=T)
d1 <- estimateTagwiseDisp(d1)
et12 <- exactTest(d1)
de1 <- decideTestsDGE(et12, adjust.method="BH", p.value=0.05)
de1tags12 <- rownames(d1)[as.logical(de1)]
plotSmear(et12, de.tags=de1tags12)
abline(h = c(-2, 2), col = "blue")
topTags(et12, n=10)
?topTags
nrDEG=topTags(et12, n=nrow(exprSet))
nrDEG
nrDEG=as.data.frame(nrDEG)
View(nrDEG)
View(resdata)
plotBCV(d1)
de1 <- decideTestsDGE(et12, adjust.method="BH", p.value=0.05)
de1tags12 <- rownames(d1)[as.logical(de1)]
plotSmear(et12, de.tags=de1tags12)
d
design.mat <- model.matrix(~ 0 + d$samples$group)
colnames(design.mat) <- levels(d$samples$group)
d2 <- estimateGLMCommonDisp(d,design.mat)
d2 <- estimateGLMTrendedDisp(d2,design.mat, method="power")
# You can change method to "auto", "bin.spline", "power", "spline", "bin.loess".
# The default is "auto" which chooses "bin.spline" when > 200 tags and "power" otherwise.
d2 <- estimateGLMTagwiseDisp(d2,design.mat)
plotBCV(d2)
fit <- glmFit(d2, design.mat)
lrt12 <- glmLRT(fit)
nrDEG=topTags(lrt12, n=nrow(exprSet))
nrDEG=as.data.frame(nrDEG)
View(nrDEG)
fit
de2 <- decideTestsDGE(lrt12, adjust.method="BH", p.value = 0.05)
de2tags12 <- rownames(d2)[as.logical(de2)]
plotSmear(lrt12, de.tags=de2tags12)
abline(h = c(-2, 2), col = "blue")
d <- DGEList(counts=exprSet,group=factor(group_list))
d.full <- d # keep the old one in case we mess up
#apply(d$counts, 2, sum) # total gene counts per samplekeep <- rowSums(cpm(d)>100) >= 2
keep <- rowSums(cpm(d)>100) >= 2
d <- d[keep,]
d$samples$lib.size <- colSums(d$counts)
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
d <- calcNormFactors(d)
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
design.mat <- model.matrix(~ 0 + d$samples$group)
colnames(design.mat) <- levels(d$samples$group)
design.mat
d2 <- estimateGLMCommonDisp(d,design.mat)
d2 <- estimateGLMTrendedDisp(d2,design.mat, method="auto")
# You can change method to "auto", "bin.spline", "power", "spline", "bin.loess".
# The default is "auto" which chooses "bin.spline" when > 200 tags and "power" otherwise.
d2 <- estimateGLMTagwiseDisp(d2,design.mat)
plotBCV(d2)
d1 <- estimateCommonDisp(d, verbose=T)
d1 <- estimateTagwiseDisp(d1)
png("BCV.png")
plotBCV(d1)
dev.off()
plotBCV(d1)
et12 <- exactTest(d1)
fit <- glmFit(d2, design.mat)
# compare (group 1 - group 2) to 0:
# this is equivalent to comparing group 1 to group 2
lrt12 <- glmLRT(fit)
topTags(lrt12)
topTags(et12)
?glmLRT
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
runApp("8-DEG/")
