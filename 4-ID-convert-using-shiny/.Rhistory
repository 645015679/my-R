summary(results)
library(pbapply)
start=Sys.time()
results=pbsapply(1:10000,my_fun(1000))
Sys.time()-start  ##9.909524 secs
my_fun(1000)
start=Sys.time()
results=pbsapply(1:10000,my_fun(),1000)
Sys.time()-start  ##9.909524 secs
library(pbapply)
start=Sys.time()
results=pbsapply(1:10000,my_fun,1000)
Sys.time()-start  ##9.909524 secs
library(pbapply)
start=Sys.time()
results=pbsapply(1:10000,function(i){my_fun(1000)})
Sys.time()-start  ##9.909524 secs
summary(results)
boxplot(results)
mean(results)
judge=function(l=left,c=count,n=number,w=win){
c=c+1;
if(rnorm(1)>0){
l=l+2^n
n=1 # win
w=w+1
}else{
l=l-2^n
n=n+1 #lose
}
return(c(l,c,n,w))
}
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
judge(0,1,1,0)
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
rnorm(1)>0
my_fun=function(x){
tmp=judge(0,1,1,0)
#print(tmp)
for(i in 1:x){
tmp=judge(tmp[1],tmp[2],tmp[3],tmp[4])
#print(tmp)
}
return(tmp[1])
}
my_fun(10)
my_fun=function(x){
tmp=judge(0,1,1,0)
print(tmp)
for(i in 1:x){
tmp=judge(tmp[1],tmp[2],tmp[3],tmp[4])
print(tmp)
}
return(tmp[1])
}
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun(10)
my_fun=function(x){
tmp=judge(0,1,1,0)
#print(tmp)
for(i in 1:x){
tmp=judge(tmp[1],tmp[2],tmp[3],tmp[4])
#print(tmp)
}
return(tmp[1])
}
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(1000)
my_fun(100000)
library(tcltk)
plot.new()
start=Sys.time()
pb <- tkProgressBar("ProgressBar","completed %",  0, 100)
u=1:1000
for (i in u){
my_fun(1000)
info <- sprintf("completed %d%%", round(i*100/length(u)))
setTkProgressBar(pb, i*100/length(u), sprintf("ProgressBar (%s)", info), info)
}
close(pb)#close the ProgressBar
Sys.time()-start ## 11.36683 secs
library(pbapply)
start=Sys.time()
results=pbsapply(1:1000,function(i){my_fun(1000)})
Sys.time()-start  ##9.909524 secs
results
summary(results)
?install.packages()
install.packages("Nozzle.R1",repos="http://cran.us.r-project.org")
getwd()
dir.create( "reports", showWarnings=FALSE );
require( Nozzle.R1 )
# Phase 1: create report elements
r <- newCustomReport( "My Report" );
s <- newSection( "My Section" );
ss1 <- newSection( "My Subsection 1" );
ss2 <- newSection( "My Subsection 2" );
t <- newTable( iris[45:55,], "Iris data." ); # w/ caption
p <- newParagraph( "Some sample text." );
# Phase 2: assemble report structure bottom-up
ss1 <- addTo( ss1, t ); # parent, child_1, ..., child_n
ss2 <- addTo( ss2, p );
s <- addTo( s, ss1, ss2 );
r <- addTo( r, s );
# Phase 3: render report to file
writeReport( r, filename="reports/my_report" ); # w/o extension
library(org.Hs.eg.db)
mappedkeys(org.Hs.egSYMBOL)
library(cgdsr)
mycgds <- CGDS('http://www.cbioportal.org/public-portal/')
test(mycgds)
all_TCGA_studies <- getCancerStudies(mycgds)
all_tables <- getCaseLists(mycgds, 'ov_tcga_pub')
all_dataset<- getGeneticProfiles(mycgds, 'ov_tcga_pub')
#BRCA1 <- getProfileData(mycgds, my_gene, my_dataset, my_table)
ov_tcga_pub_meth1<- getClinicalData(mycgds, all_tables[8,1])
ov_tcga_pub_meth2<- getClinicalData(mycgds, all_tables[9,1])
ov_tcga_pub_meth3<- getClinicalData(mycgds, all_tables[10,1])
ov_tcga_pub_meth4<- getClinicalData(mycgds, all_tables[11,1])
fisher.test(matrix(100,100,60,70))
?fisher.test
fisher.test(matrix(c(100,100,60,70),nrow = 2)
)
fisher.test(matrix(c(100,100,60,70),nrow = 2))
40/66
48/79
install.packages("pbapply",repos="http://cran.us.r-project.org")
install.packages("parallel",repos="http://cran.us.r-project.org")
library(cgdsr)
mycgds <- CGDS('http://www.cbioportal.org/public-portal/')
test(mycgds)
all_TCGA_studies <- getCancerStudies(mycgds)
all_tables <- getCaseLists(mycgds, 'ov_tcga_pub')
all_dataset<- getGeneticProfiles(mycgds, 'ov_tcga_pub')
#BRCA1 <- getProfileData(mycgds, my_gene, my_dataset, my_table)
ov_tcga_pub_meth1<- getClinicalData(mycgds, all_tables[8,1])
ov_tcga_pub_meth2<- getClinicalData(mycgds, all_tables[9,1])
ov_tcga_pub_meth3<- getClinicalData(mycgds, all_tables[10,1])
ov_tcga_pub_meth4<- getClinicalData(mycgds, all_tables[11,1])
ov_tcga_pub_meth1$sample<- rownames(ov_tcga_pub_meth1)
ov_tcga_pub_meth2$sample<- rownames(ov_tcga_pub_meth2)
ov_tcga_pub_meth3$sample<- rownames(ov_tcga_pub_meth3)
ov_tcga_pub_meth4$sample<- rownames(ov_tcga_pub_meth4)
ov_tcga_pub_meth1$meth_type<- 'meth1'
ov_tcga_pub_meth2$meth_type<- 'meth2'
ov_tcga_pub_meth3$meth_type<- 'meth3'
ov_tcga_pub_meth4$meth_type<- 'meth4'
ov_tcga_pub_exp1<- getClinicalData(mycgds, all_tables[3,1])
ov_tcga_pub_exp2<- getClinicalData(mycgds, all_tables[4,1])
ov_tcga_pub_exp3<- getClinicalData(mycgds, all_tables[5,1])
ov_tcga_pub_exp4<- getClinicalData(mycgds, all_tables[6,1])
ov_tcga_pub_exp1$sample<- rownames(ov_tcga_pub_exp1)
ov_tcga_pub_exp2$sample<- rownames(ov_tcga_pub_exp2)
ov_tcga_pub_exp3$sample<- rownames(ov_tcga_pub_exp3)
ov_tcga_pub_exp4$sample<- rownames(ov_tcga_pub_exp4)
ov_tcga_pub_exp1$mRNA_type<- 'mRNA1'
ov_tcga_pub_exp2$mRNA_type<- 'mRNA2'
ov_tcga_pub_exp3$mRNA_type<- 'mRNA3'
ov_tcga_pub_exp4$mRNA_type<- 'mRNA4'
dat_meth=rbind(ov_tcga_pub_meth1,ov_tcga_pub_meth2,ov_tcga_pub_meth3,ov_tcga_pub_meth4)
dat_mRNA=rbind(ov_tcga_pub_exp1,ov_tcga_pub_exp2,ov_tcga_pub_exp3,ov_tcga_pub_exp4)
dat=merge(dat_meth,dat_mRNA,by="sample")
sur_dat=dat[,c("OS_MONTHS.y","OS_STATUS.y","mRNA_type","meth_type")]
library(cgdsr)
mycgds <- CGDS('http://www.cbioportal.org/public-portal/')
test(mycgds)
all_TCGA_studies <- getCancerStudies(mycgds)
all_tables <- getCaseLists(mycgds, 'ov_tcga_pub')
all_dataset<- getGeneticProfiles(mycgds, 'ov_tcga_pub')
#BRCA1 <- getProfileData(mycgds, my_gene, my_dataset, my_table)
ov_tcga_pub_meth1<- getClinicalData(mycgds, all_tables[8,1])
ov_tcga_pub_meth2<- getClinicalData(mycgds, all_tables[9,1])
ov_tcga_pub_meth3<- getClinicalData(mycgds, all_tables[10,1])
ov_tcga_pub_meth4<- getClinicalData(mycgds, all_tables[11,1])
ov_tcga_pub_meth1$sample<- rownames(ov_tcga_pub_meth1)
ov_tcga_pub_meth2$sample<- rownames(ov_tcga_pub_meth2)
ov_tcga_pub_meth3$sample<- rownames(ov_tcga_pub_meth3)
ov_tcga_pub_meth4$sample<- rownames(ov_tcga_pub_meth4)
ov_tcga_pub_meth1$meth_type<- 'meth1'
ov_tcga_pub_meth2$meth_type<- 'meth2'
ov_tcga_pub_meth3$meth_type<- 'meth3'
ov_tcga_pub_meth4$meth_type<- 'meth4'
ov_tcga_pub_exp1<- getClinicalData(mycgds, all_tables[3,1])
ov_tcga_pub_exp2<- getClinicalData(mycgds, all_tables[4,1])
ov_tcga_pub_exp3<- getClinicalData(mycgds, all_tables[5,1])
ov_tcga_pub_exp4<- getClinicalData(mycgds, all_tables[6,1])
ov_tcga_pub_exp1$sample<- rownames(ov_tcga_pub_exp1)
ov_tcga_pub_exp2$sample<- rownames(ov_tcga_pub_exp2)
ov_tcga_pub_exp3$sample<- rownames(ov_tcga_pub_exp3)
ov_tcga_pub_exp4$sample<- rownames(ov_tcga_pub_exp4)
ov_tcga_pub_exp1$mRNA_type<- 'mRNA1'
ov_tcga_pub_exp2$mRNA_type<- 'mRNA2'
ov_tcga_pub_exp3$mRNA_type<- 'mRNA3'
ov_tcga_pub_exp4$mRNA_type<- 'mRNA4'
dat_meth=rbind(ov_tcga_pub_meth1,ov_tcga_pub_meth2,ov_tcga_pub_meth3,ov_tcga_pub_meth4)
dat_mRNA=rbind(ov_tcga_pub_exp1,ov_tcga_pub_exp2,ov_tcga_pub_exp3,ov_tcga_pub_exp4)
dat=merge(dat_meth,dat_mRNA,by="sample")
sur_dat=dat[,c("OS_MONTHS.y","OS_STATUS.y","mRNA_type","meth_type")]
write.table(sur_dat,"sur_dat.txt",col.names = F,quote = F)
write.table(sur_dat,"sur_dat.txt",row.names = F,quote = F)
my.surv=Surv(sur_dat$OS_MONTHS.y,sur_dat$OS_STATUS.y=='LIVING')
#plot(survfit(my.surv~1))
survfit(my.surv~1)
kmfit=survfit(my.surv~1)
plot(kmfit)
summary(kmfit)
library(survival)
my.surv=Surv(sur_dat$OS_MONTHS.y,sur_dat$OS_STATUS.y=='LIVING')
#plot(survfit(my.surv~1))
survfit(my.surv~1)
kmfit=survfit(my.surv~1)
plot(kmfit)
summary(kmfit)
View(ov_tcga_pub_meth1)
View(sur_dat)
survdiff(my.surv~mRNA_type,data=sur_dat)
survdiff(my.surv~meth_type,data=sur_dat)
coxmodel <- coxph(my.surv~mRNA_type+meth_type,data=sur_dat)
summary(coxmodel)
rep(c('a','b'),3,4)
# Load package
library(networkD3)
# Create fake data
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target,stringsAsFactors = F)
# Plot
simpleNetwork(networkData,fontSize=25)
URL <- paste0(
"https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata//flare.json")
## Convert to list format
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
# Use subset of data for more readable diagram
Flare$children = Flare$children[1:3]
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)
Flare
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
Flare$children
str(Flare$children)
# Use subset of data for more readable diagram
Flare$children = Flare$children[1:3]
str(Flare$children)
library(magrittr)
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9) %>%
saveNetwork(file = 'Net1.html')
Flare$children = Flare$children[1]
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)
str(Flare)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,5)
x
x=rep(1:4,each=5)
x
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
View(dat)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
kmfit1 <- survfit(my.surv~x,data=dat)
summary(kmfit1)
plot(kmfit1)
survdiff(my.surv~x, data=dat)
plot(kmfit1,col = rainbow(4))
kmfit1 <- coxph(my.surv~x,data=dat)
coxh_model <- coxph(my.surv~x,data=dat)
summary(coxh_model)
?cor.test
coxh_model <- coxph(my.surv~x,data=dat)
summary(coxh_model)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
View(dat)
dat
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
dat
kmfit1 <- survfit(my.surv~x,data=dat)
survdiff(my.surv~x, data=dat)
summary(kmfit1)
plot(kmfit1,col = rainbow(4))
coxh_model <- coxph(my.surv~x,data=dat)
summary(coxh_model)
dat
View(dat)
library(quantmod)‘
library(quantmod)
?install.packages
install.packages("quantmod",repos="http://cran.us.r-project.org")
install.packages("zoo",repos="http://cran.us.r-project.org")
library(quantmod)
max(1:6)
1:6
?getSymbols
getSymbols('AAPL',src='yahoo',from='2010-01-01',to='2012-01-01')
AAPL
View(AAPL)
plot(AAPL)
str(AAPL)
tmp=as.data.frame(AAPL)
boxplot(tmp[,4]-tmp[,1])
tmp[,4]-tmp[,1]
fivenum(tmp[,4]-tmp[,1])
plot(tmp[,1])
plot(tmp[,2])
fivenum(tmp[,4]-tmp[,1])
max(tmp[,4]-tmp[,1])
sort(tmp[,4]-tmp[,1])
rank(tmp[,4]-tmp[,1])
oder(tmp[,4]-tmp[,1])
order(tmp[,4]-tmp[,1])
names(tmp)
tmp$diff=(tmp[,4]-tmp[,1])
tmp[tmp$diff==14.63,]
max(tmp$diff)
tmp$diff==14.63
tmp[tmp$diff==14.63,]
tmp[tmp$diff>14,]
tmp[tmp$diff>12,]
tmp[tmp$diff>12,7]
tmp[tmp$diff>12,1:4]
tmp[tmp$diff>10,1:4]
tmp=read.table('D:\\test_analysis\\script\\画基因的覆盖图\\DMD.txt')
position=tmp[,2]
depth=tmp[,3]
annotationPKG='org.Hs.eg.db'
suppressMessages(library(org.Hs.eg.db))
ls("package:org.Hs.eg.db")
tmp=unlist(as.list(org.Hs.egSYMBOL))
EG2Symbol=data.frame(EGID=names(tmp),symbol=as.character(tmp))
tmp=unlist(as.list(org.Hs.egENSEMBL))
EG2ENSEMBL=data.frame(EGID=names(tmp),ENSEMBL=as.character(tmp))
tmp=unlist(as.list(org.Hs.egGENENAME))
EG2name=data.frame(EGID=names(tmp),name=as.character(tmp))
tmp=unlist(as.list(org.Hs.egMAP))
EG2MAP=data.frame(EGID=names(tmp),MAP=as.character(tmp))
###EG2GO and    using mySQL
EG2path=as.list(org.Hs.egPATH)
EG2path=lapply(EG2path, function(x) paste(x,collapse = ":"))
tmp=unlist(EG2path)
EG2path=data.frame(EGID=names(tmp),path=as.character(tmp))
#as.list(head(org.Hs.egGO2ALLEGS))
GO2allEG=as.list(org.Hs.egGO2ALLEGS)
tmp=unlist(GO2allEG)
names(tmp)=substring(names(tmp),1,10) ## change GO:0000002.IMP to GO:0000002
EG2allGO <- tapply(tmp,tmp,function(x){names(x)})
EG2allGO=lapply(EG2allGO, function(x) paste(x,collapse = ":"))
tmp=unlist(EG2allGO)
EG2GO=data.frame(EGID=names(tmp),GO=as.character(tmp))
tmp=merge(EG2Symbol,EG2MAP,by='EGID',all=TRUE)
tmp=merge(tmp,EG2ENSEMBL,by='EGID',all=TRUE)
tmp=merge(tmp,EG2path,by='EGID',all=TRUE)
tmp=merge(tmp,EG2name,by='EGID',all=TRUE)
my_gene_mapping=merge(tmp,EG2GO,by='EGID',all=TRUE)
View(my_gene_mapping)
suppressMessages(library(RMySQL))
con <- dbConnect(MySQL(), host="127.0.0.1", port=3306, user="root", password="11111111")
dbSendQuery(con, "USE test")
dbWriteTable(con,'my_gene_mapping',my_gene_mapping)
dbDisconnect(con)
head(EG2path)
head(toTable(org.Hs.egPATH))
library(RSQLite)
library(shiny)
setwd("D:\\test_analysis\\my_github\\my-R\\4-ID-convert-using-shiny")
library(RSQLite)
sqlite    <- dbDriver("SQLite")
con <- dbConnect(sqlite,"hg19_bioconductor.sqlite") # makes a new file
suppressMessages(library(org.Hs.eg.db))
kegg2ID=toTable(org.Hs.egPATH)
#[1] "gene_id" "path_id"
dbWriteTable(con,'keggID2geneID',kegg2ID,row.name=F,overwrite=T)
go2id=toTable(org.Hs.egGO2ALLEGS)
## gene_id      go_id Evidence Ontology
dbWriteTable(con,'goID2geneID',go2id,row.name=F,overwrite=T)
library(KEGG.db)
library(GO.db)
#ls("package:KEGG.db")
#ls("package:GO.db")
keggID2name=toTable(KEGGPATHID2NAME)
##[1] "path_id"   "path_name"
dbWriteTable(con,'keggID2name',keggID2name,row.name=F,overwrite=T)
all_go=mappedkeys(GOTERM)
go2name=data.frame(go_id=all_go,term=as.character(Term(all_go)))
dbWriteTable(con,'go2name',go2name,row.name=F,overwrite=T)
suppressMessages(library("org.Hs.eg.db"))
all_EG=mappedkeys(org.Hs.egSYMBOL)
tmp=unlist(as.list(org.Hs.egSYMBOL))
EG2Symbol=data.frame(EGID=names(tmp),symbol=as.character(tmp))
tmp=unlist(as.list(org.Hs.egENSEMBL))
EG2ENSEMBL=data.frame(EGID=names(tmp),ENSEMBL=as.character(tmp))
tmp=unlist(as.list(org.Hs.egGENENAME))
EG2name=data.frame(EGID=names(tmp),name=as.character(tmp))
tmp=unlist(as.list(org.Hs.egMAP))
EG2MAP=data.frame(EGID=names(tmp),MAP=as.character(tmp))
tmp=merge(EG2Symbol,EG2MAP,by='EGID',all=TRUE)
tmp=merge(tmp,EG2ENSEMBL,by='EGID',all=TRUE)
my_gene_mapping=merge(tmp,EG2name,by='EGID',all=TRUE)
##[1] "EGID"    "symbol"  "MAP"     "ENSEMBL" "name"
apply(my_gene_mapping,2,function(x) length(unique(x)))
dbWriteTable(con,'my_gene_mapping',my_gene_mapping,row.name=F,overwrite=T)
dbDisconnect(con)
library(shiny)
setwd("D:\\test_analysis\\my_github\\my-R\\4-ID-convert-using-shiny")
runApp("ID_converter/")
runApp("ID_converter/")
library(shiny)
suppressMessages(library(RSQLite))
sqlite    <- dbDriver("SQLite")
con <- dbConnect(sqlite,"www/hg19_bioconductor.sqlite")
con <- dbConnect(sqlite,"./ID_converter/www/hg19_bioconductor.sqlite")
library(shiny)
setwd("D:\\test_analysis\\my_github\\my-R\\4-ID-convert-using-shiny")
runApp("ID_converter/")
