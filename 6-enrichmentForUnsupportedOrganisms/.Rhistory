# Load package
library(networkD3)
# Create fake data
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target,stringsAsFactors = F)
# Plot
simpleNetwork(networkData,fontSize=25)
URL <- paste0(
"https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata//flare.json")
## Convert to list format
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
# Use subset of data for more readable diagram
Flare$children = Flare$children[1:3]
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)
Flare
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
Flare$children
str(Flare$children)
# Use subset of data for more readable diagram
Flare$children = Flare$children[1:3]
str(Flare$children)
library(magrittr)
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9) %>%
saveNetwork(file = 'Net1.html')
Flare$children = Flare$children[1]
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)
str(Flare)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,5)
x
x=rep(1:4,each=5)
x
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
View(dat)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
kmfit1 <- survfit(my.surv~x,data=dat)
summary(kmfit1)
plot(kmfit1)
survdiff(my.surv~x, data=dat)
plot(kmfit1,col = rainbow(4))
kmfit1 <- coxph(my.surv~x,data=dat)
coxh_model <- coxph(my.surv~x,data=dat)
summary(coxh_model)
?cor.test
coxh_model <- coxph(my.surv~x,data=dat)
summary(coxh_model)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4,each=5)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
View(dat)
dat
library(survival)
time=1:20
status=c(1,1,1,1,0,
1,1,1,0,0,
1,1,0,0,0,
1,0,0,0,0)
x=rep(1:4)
dat=data.frame(status,time,x)
my.surv <- Surv(dat$time,dat$status==1)
kmfit1 <- survfit(my.surv~1)
summary(kmfit1)
plot(kmfit1)
dat
kmfit1 <- survfit(my.surv~x,data=dat)
survdiff(my.surv~x, data=dat)
summary(kmfit1)
plot(kmfit1,col = rainbow(4))
coxh_model <- coxph(my.surv~x,data=dat)
summary(coxh_model)
dat
View(dat)
library(quantmod)‘
library(quantmod)
?install.packages
install.packages("quantmod",repos="http://cran.us.r-project.org")
install.packages("zoo",repos="http://cran.us.r-project.org")
library(quantmod)
max(1:6)
1:6
?getSymbols
getSymbols('AAPL',src='yahoo',from='2010-01-01',to='2012-01-01')
AAPL
View(AAPL)
plot(AAPL)
str(AAPL)
tmp=as.data.frame(AAPL)
boxplot(tmp[,4]-tmp[,1])
tmp[,4]-tmp[,1]
fivenum(tmp[,4]-tmp[,1])
plot(tmp[,1])
plot(tmp[,2])
fivenum(tmp[,4]-tmp[,1])
max(tmp[,4]-tmp[,1])
sort(tmp[,4]-tmp[,1])
rank(tmp[,4]-tmp[,1])
oder(tmp[,4]-tmp[,1])
order(tmp[,4]-tmp[,1])
names(tmp)
tmp$diff=(tmp[,4]-tmp[,1])
tmp[tmp$diff==14.63,]
max(tmp$diff)
tmp$diff==14.63
tmp[tmp$diff==14.63,]
tmp[tmp$diff>14,]
tmp[tmp$diff>12,]
tmp[tmp$diff>12,7]
tmp[tmp$diff>12,1:4]
tmp[tmp$diff>10,1:4]
tmp=read.table('D:\\test_analysis\\script\\画基因的覆盖图\\DMD.txt')
position=tmp[,2]
depth=tmp[,3]
annotationPKG='org.Hs.eg.db'
suppressMessages(library(org.Hs.eg.db))
ls("package:org.Hs.eg.db")
tmp=unlist(as.list(org.Hs.egSYMBOL))
EG2Symbol=data.frame(EGID=names(tmp),symbol=as.character(tmp))
tmp=unlist(as.list(org.Hs.egENSEMBL))
EG2ENSEMBL=data.frame(EGID=names(tmp),ENSEMBL=as.character(tmp))
tmp=unlist(as.list(org.Hs.egGENENAME))
EG2name=data.frame(EGID=names(tmp),name=as.character(tmp))
tmp=unlist(as.list(org.Hs.egMAP))
EG2MAP=data.frame(EGID=names(tmp),MAP=as.character(tmp))
###EG2GO and    using mySQL
EG2path=as.list(org.Hs.egPATH)
EG2path=lapply(EG2path, function(x) paste(x,collapse = ":"))
tmp=unlist(EG2path)
EG2path=data.frame(EGID=names(tmp),path=as.character(tmp))
#as.list(head(org.Hs.egGO2ALLEGS))
GO2allEG=as.list(org.Hs.egGO2ALLEGS)
tmp=unlist(GO2allEG)
names(tmp)=substring(names(tmp),1,10) ## change GO:0000002.IMP to GO:0000002
EG2allGO <- tapply(tmp,tmp,function(x){names(x)})
EG2allGO=lapply(EG2allGO, function(x) paste(x,collapse = ":"))
tmp=unlist(EG2allGO)
EG2GO=data.frame(EGID=names(tmp),GO=as.character(tmp))
tmp=merge(EG2Symbol,EG2MAP,by='EGID',all=TRUE)
tmp=merge(tmp,EG2ENSEMBL,by='EGID',all=TRUE)
tmp=merge(tmp,EG2path,by='EGID',all=TRUE)
tmp=merge(tmp,EG2name,by='EGID',all=TRUE)
my_gene_mapping=merge(tmp,EG2GO,by='EGID',all=TRUE)
View(my_gene_mapping)
suppressMessages(library(RMySQL))
con <- dbConnect(MySQL(), host="127.0.0.1", port=3306, user="root", password="11111111")
dbSendQuery(con, "USE test")
dbWriteTable(con,'my_gene_mapping',my_gene_mapping)
dbDisconnect(con)
head(EG2path)
head(toTable(org.Hs.egPATH))
getwd()
library(RSQLite)
sqlite    <- dbDriver("SQLite")
con <- dbConnect(sqlite,"hg19_bioconductor.sqlite") # makes a new file
suppressMessages(library(org.Hs.eg.db))
kegg2ID=toTable(org.Hs.egPATH)
#[1] "gene_id" "path_id"
dbWriteTable(con,'keggID2geneID',kegg2ID,row.name=F,overwrite=T)
go2id=toTable(org.Hs.egGO2ALLEGS)
## gene_id      go_id Evidence Ontology
dbWriteTable(con,'goID2geneID',go2id,row.name=F,overwrite=T)
library(KEGG.db)
library(GO.db)
#ls("package:KEGG.db")
#ls("package:GO.db")
keggID2name=toTable(KEGGPATHID2NAME)
##[1] "path_id"   "path_name"
dbWriteTable(con,'keggID2name',keggID2name,row.name=F,overwrite=T)
all_go=mappedkeys(GOTERM)
go2name=data.frame(go_id=all_go,term=as.character(Term(all_go)))
dbWriteTable(con,'go2name',go2name,row.name=F,overwrite=T)
suppressMessages(library("org.Hs.eg.db"))
all_EG=mappedkeys(org.Hs.egSYMBOL)
tmp=unlist(as.list(org.Hs.egSYMBOL))
EG2Symbol=data.frame(EGID=names(tmp),symbol=as.character(tmp))
tmp=unlist(as.list(org.Hs.egENSEMBL))
EG2ENSEMBL=data.frame(EGID=names(tmp),ENSEMBL=as.character(tmp))
tmp=unlist(as.list(org.Hs.egGENENAME))
EG2name=data.frame(EGID=names(tmp),name=as.character(tmp))
tmp=unlist(as.list(org.Hs.egMAP))
EG2MAP=data.frame(EGID=names(tmp),MAP=as.character(tmp))
tmp=merge(EG2Symbol,EG2MAP,by='EGID',all=TRUE)
tmp=merge(tmp,EG2ENSEMBL,by='EGID',all=TRUE)
my_gene_mapping=merge(tmp,EG2name,by='EGID',all=TRUE)
##[1] "EGID"    "symbol"  "MAP"     "ENSEMBL" "name"
apply(my_gene_mapping,2,function(x) length(unique(x)))
dbWriteTable(con,'my_gene_mapping',my_gene_mapping,row.name=F,overwrite=T)
dbDisconnect(con)
library(devtools)
options(download.file.method = "wininet")
install_github("genome/bmm")
remove.packages('curl')
install.packages('curl')
install.packages("curl")
install.packages('curl',repos="http://cran.us.r-project.org")
install.packages('httr',repos="http://cran.us.r-project.org")
library(Rcurl)
install_github("genome/bmm")
install.packages("devtools",repos="http://cran.us.r-project.org")
library(gplots)
install.packages("gplots",repos="http://cran.us.r-project.org")
library(gplots)
setwd(D:\\test_analysis\\my_github\\my-R\\4-ID-convert-using-shiny)
setwd("D:\\test_analysis\\my_github\\my-R\\4-ID-convert-using-shiny")
library(shiny)
runApp("ID_converter/")
hyperGtest <- function(GeneID2Path,Path2GeneID,diff_gene){
diff_gene_has_path=intersect(diff_gene,names(GeneID2Path))
n=length(diff_gene_has_path) #306
N=length(GeneID2Path) #5870
options(digits = 4)
results=c()
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (i %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
if (k==0) next
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
results=rbind(results,c(i,p,OddsRatio,exp_count,k,M))
}
colnames(results)=c("PathwayID","Pvalue","OddsRatio","ExpCount","Count","Size")
return(results)
}
setwd("D:\\test_analysis\\my_github\\my-R\\7-enrichment-with-newest-kegg")
tmp=read.table("kegg2geneID.txt",sep="\t")
View(tmp)
tmp=read.table("kegg2geneID.txt",sep="\t",colClasses=c('character'))
View(tmp)
View(tmp)
kegg2name=read.delim("kegg_hierarchical.txt",header=F,sep="\t",stringsAsFactors =F)
View(kegg2name)
tmp=read.table("kegg2geneID.txt",sep="\t",colClasses=c('character'))
#tmp=toTable(org.Hs.egPATH)
# first column is kegg ID, second column is entrez ID
GeneID2kegg<<- tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
kegg2GeneID<<- tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
kegg2name=read.delim("kegg_hierarchical.txt",header=F,sep="\t",colClasses=c('character'),stringsAsFactors =F)
colnames(kegg2name)=c('parent1','parent2','pathway_id','pathway_name')
View(kegg2name)
View(tmp)
a=read.table("diff_gene_list.txt")
View(a)
diff_gene_list=a[,1]
kegg_result=hyperGtest_jimmy(GeneID2kegg,kegg2GeneID,diff_gene_list)
hyperGtest_jimmy <- function(GeneID2Path,Path2GeneID,diff_gene){
diff_gene_has_path=intersect(diff_gene,names(GeneID2Path))
n=length(diff_gene_has_path) #306
N=length(GeneID2Path) #5870
options(digits = 4)
results=c()
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (i %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
if (k==0) next
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
results=rbind(results,c(i,p,OddsRatio,exp_count,k,M))
}
colnames(results)=c("PathwayID","Pvalue","OddsRatio","ExpCount","Count","Size")
return(results)
}
kegg_result=hyperGtest_jimmy(GeneID2kegg,kegg2GeneID,diff_gene_list)
kegg_result=as.data.frame(kegg_result)
kegg_result$pathway_name=kegg2name[match(as.numeric(as.character(kegg_result[,1])),kegg2name[,'pathway_id']),'pathway_name']
kegg_result=kegg_result[order(kegg_result[,2]),]
View(kegg_result)
rownames(kegg2name)=kegg2name$pathway_id
kegg_result=hyperGtest_jimmy(GeneID2kegg,kegg2GeneID,diff_gene_list)
kegg_result=as.data.frame(kegg_result)
kegg_result$pathway_name=kegg2name[match(as.numeric(as.character(kegg_result[,1])),kegg2name[,'pathway_id']),'pathway_name']
kegg_result=kegg_result[order(kegg_result[,2]),]
View(kegg_result)
kegg_result$pathway_name=kegg2name[match(kegg_result[,1]),kegg2name[,'pathway_id']),'pathway_name']
kegg_result$pathway_name=kegg2name[match(kegg_result[,1],kegg2name[,'pathway_id']),'pathway_name']
View(kegg_result)
kegg_result=kegg_result[order(kegg_result[,2]),]
write.csv(kegg_result,paste(outdir,"/update_kegg.enrichment.csv",sep=""),row.names = F)
write.csv(kegg_result,"update_kegg.enrichment.csv",row.names = F)
source("enrichment-with-newest-kegg.R")
source("enrichment-with-newest-kegg.R")
tmp=read.table("kegg2geneID.txt",sep="\t",colClasses=c('character'))
head(tpm)
head(tmp)
keggframeData=read.table("kegg2geneID.txt",sep="\t",colClasses=c('character'))
keggFrame=KEGGFrame(keggframeData,organism="unKnown")
library(GOstats)
library(GOstats)
keggframeData=read.table("kegg2geneID.txt",sep="\t",colClasses=c('character'))
keggFrame=KEGGFrame(keggframeData,organism="unKnown")
universe = Lkeys(org.Hs.egGO)
gsc <- GeneSetCollection(keggFrame, setType = KEGGCollection())
library("GSEABase")
gsc <- GeneSetCollection(keggFrame, setType = KEGGCollection())
universe = Lkeys(org.Hs.eg.db::org.Hs.egGO)
library(GOstats)
library(GSEABase)
keggframeData=read.table("kegg2geneID.txt",sep="\t",colClasses=c('character'))
keggFrame=KEGGFrame(keggframeData,organism="unKnown")
gsc <- GeneSetCollection(keggFrame, setType = KEGGCollection())
universe = Lkeys(org.Hs.egGO)
a=read.table("diff_gene_list.txt")
diff_gene_list=a[,1]
universe = Lkeys(org.Hs.eg.db::org.Hs.egGO)
params = GSEAKEGGHyperGParams(name="My Custom GSEA based annot Params",
geneSetCollection=gsc,
geneIds=diff_gene_list,
universeGeneIds=universe,
pvalueCutoff=1,
testDirection = "over")
hyperG.results = hyperGTest(params)
head(summary(hyperG.results))
head(universe)
a=read.table("diff_gene_list.txt")
diff_gene_list=as.character(a[,1])
universe = Lkeys(org.Hs.eg.db::org.Hs.egGO)
params = GSEAKEGGHyperGParams(name="My Custom GSEA based annot Params",
geneSetCollection=gsc,
geneIds=diff_gene_list,
universeGeneIds=universe,
pvalueCutoff=1,
testDirection = "over")
hyperG.results = hyperGTest(params)
head(summary(hyperG.results))
write.table(universe,"universe_gene_list.txt",row.names = F,quote = F)
getwd
getwd()
write.table(universe,"universe_gene_list.txt",row.names = F,quote = F,col.names = F)
go2id=toTable(org.Hs.egGO2ALLEGS)
go2id=toTable(org.Hs.eg.db::org.Hs.egGO2ALLEGS)
head(go2id)
sample(1:10,4)
tmp=go2id[,c(2,3,1)]
write.table(tmp,"GO2gene.txt",col.names = F,row.names = F,sep="\t",quote = F)
goframeData=read.table("../6-enrichmentForUnsupportedOrganisms/GO2gene.txt",header = F,sep="\t",stringsAsFactors = F)
goFrame=GOFrame(goframeData,organism="Homo sapiens")
goAllFrame=GOAllFrame(goFrame)
gsc <- GeneSetCollection(goAllFrame, setType = GOCollection())
setwd("../6-enrichmentForUnsupportedOrganisms/")
source("enrichmentForUnsupportedOrganisms_GOstats.R")
head(goframeData)
head(goframeData)
source("enrichmentForUnsupportedOrganisms_GOstats.R")
GO2geneID_file='GO2geneID.txt'
goframeData=read.table(GO2geneID_file,header = F,sep="\t",stringsAsFactors = F)
head(goframeData)
tapply(goframeData[,3], goframeData[,2], length)
tapply(goframeData[,3], goframeData[,1], length)
go_length=tapply(goframeData[,3], goframeData[,1], length)
head(go_length)
length(go_length[go_length>10])
head(goframeData)
dim(goframeData[goframeData[,1]  %in% names(go_length[go_length>10]),])
dim(goframeData)
dim(goframeData[goframeData[,1]  %in% names(go_length[go_length<200]),])
goframeData=goframeData[goframeData[,1]  %in% names(go_length[go_length<200]),]
goframeData=goframeData[goframeData[,1]  %in% names(go_length[go_length>10]),]
write.table(goframeData,GO2geneID_file,row.names = F,col.names = F,quote = F)
source("enrichmentForUnsupportedOrganisms_GOstats.R")
suppressMessages(library(GOstats))
suppressMessages(library(GSEABase))
suppressMessages(library(optparse))
option_list = list(
make_option(c("-p", "--kegg2geneID"), action="store", help="The full path of kegg2geneID file eg:kegg2geneID.txt"),
make_option(c("-g", "--GO2geneID"), action="store", help="The full path of GO2geneID file eg:GO2geneID.txt"),
make_option(c("-u", "--universe_gene_list"), action="store", help="The full path of universe_gene_list file eg:universe_gene_list.txt"),
make_option(c("-d", "--diff_gene_list"), action="store",help="The full path of diff_gene_list file eg:diff_gene_list.txt")
)
opt = parse_args(OptionParser(option_list=option_list))
## first check the params!!!
if(is.null(opt$kegg2geneID)){
kegg2geneID_file='kegg2geneID.txt'
}else{
kegg2geneID_file=opt$kegg2geneID
}
if(is.null(opt$GO2geneID)){
GO2geneID_file='GO2geneID.txt'
}else{
GO2geneID_file=opt$GO2geneID
}
if(is.null(opt$diff_gene_list)){
diff_gene_list_file='diff_gene_list.txt'
}else{
diff_gene_list_file=opt$diff_gene_list
}
if(is.null(opt$universe_gene_list)){
universe_gene_list_file='universe_gene_list.txt'
}else{
universe_gene_list_file=opt$universe_gene_list
}
## then read the files !!!
if (file.exists(kegg2geneID_file)){
keggframeData=read.table(kegg2geneID_file,sep="\t",colClasses=c('character'))
### two columns, first is keggID and second is geneID
}else{stop("we can not find the file:kegg2geneID_file")}
if (file.exists(GO2geneID_file)){
goframeData=read.table(GO2geneID_file,header = F,sep="\t",stringsAsFactors = F)
### three columns, first is GO ID and second is evidence codes, last is gene ID
}else{stop("we can not find the file:GO2geneID_file")}
if (file.exists(diff_gene_list_file)){
a=read.table(diff_gene_list_file)
diff_gene_list<<- a[,1]
}else{stop("we can not find the file:diff_gene_list_file")}
if (file.exists(universe_gene_list_file)){
a=read.table(universe_gene_list_file)
universe=as.character(a[,1])
}else{stop("we can not find the file:universe_gene_list_file")}
## first do kegg enrichment analysis !
keggFrame=KEGGFrame(keggframeData,organism="unKnown")
gsc <- GeneSetCollection(keggFrame, setType = KEGGCollection())
a=read.table("diff_gene_list.txt")
diff_gene_list=as.character(a[,1])
KEGG.params = GSEAKEGGHyperGParams(name="My Custom GSEA based annot Params",
geneSetCollection=gsc,
geneIds=diff_gene_list,
universeGeneIds=universe,
pvalueCutoff=1,
testDirection = "over")
KEGG.hyperG.results = hyperGTest(KEGG.params)
head(summary(KEGG.hyperG.results))
outHTMLname="kegg.enrichment.html"
htmlReport(KEGG.hyperG.results, file=outHTMLname, summary.args=list("htmlLinks"=TRUE))
## then do GO enrichment analysis
goFrame=GOFrame(goframeData,organism="unknown")
goAllFrame=GOAllFrame(goFrame)
head(goFrame)
head(goframeData)
if (file.exists(GO2geneID_file)){
goframeData=read.table(GO2geneID_file,header = F,stringsAsFactors = F)
### three columns, first is GO ID and second is evidence codes, last is gene ID
}else{stop("we can not find the file:GO2geneID_file")}
## then do GO enrichment analysis
goFrame=GOFrame(goframeData,organism="unknown")
goAllFrame=GOAllFrame(goFrame)
gsc <- GeneSetCollection(goAllFrame, setType = GOCollection())
GOES = c('BP','CC', 'MF');
for (ontology in GOES) {
GO.hyperG.params = GSEAGOHyperGParams(name="My Custom GSEA based annot Params",
geneSetCollection=gsc,
geneIds=diff_gene_list,
universeGeneIds=universe,
ontology = ontology,
pvalueCutoff=1,
conditional = FALSE,
testDirection = "over"
)
GO.hyperG.results = hyperGTest(GO.hyperG.params);
outHTMLname=paste("GO_",ontology,".enrichment.html",sep="")
htmlReport(GO.hyperG.results, file=outHTMLname, summary.args=list("htmlLinks"=TRUE))
summary(GO.hyperG.results)
}
head(goframeData)
