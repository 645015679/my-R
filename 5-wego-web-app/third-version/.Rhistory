scatterplot3d(dat,type='h',lwd=5,pch="",color=rbc,box=F,
xlab = "row", ylab = "column", zlab = "Height",
y.ticklabs=unique(dat[,2]),x.ticklabs = unique(dat[,1]))
unique(dat[,1])
?scatterplot3d
par(las=2)
scatterplot3d(dat,type='h',lwd=5,pch="",color=rbc,box=F,
xlab = "row", ylab = "column", zlab = "Height",
y.ticklabs=unique(dat[,2]),x.ticklabs = unique(dat[,1]))
par(las=1)
scatterplot3d(dat,type='h',lwd=5,pch="",color=rbc,box=F,
xlab = "row", ylab = "column", zlab = "Height",
y.ticklabs=unique(dat[,2]),x.ticklabs = unique(dat[,1]))
plot3d(dat,type='h',lwd=5,pch="",col=rbc,box=F,
xlab = "row", ylab = "column", zlab = "Height",)
bar3d.ade(t(d), wall=6,ylab ="column",zw=0.3)
d=matrix(abs(rnorm(120)),ncol = 6)
rownames(d)=LETTERS[1:20]
dat=melt(d)
View(d)
bar3d.ade(t(d), wall=6,ylab ="column",zw=0.3)
View(d)
?bar3d.ade
bar3d.ade(t(d), wall=6,xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
bar3d.ade(t(d), wall=6,xticks=rownames(d),
xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
bar3d.ade(t(d), wall=6,xticks=rownames(d),yticks=colnames(d),
xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
colnames(d)
names(d)
d
colnames(d)=LETTERS[21:26]
colnames(d)
bar3d.ade(t(d), wall=6,xticks=rownames(d),yticks=colnames(d),
xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
bar3d.ade(t(d), wall=6,
xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
rownames(d)=LETTERS[1:20]
colnames(d)=LETTERS[21:26]
dat=melt(d)
View(dat)
?scatterplot3d
s3d.dat <- data.frame(cols=as.vector(col(my.mat)),
rows=as.vector(row(my.mat)),
value=as.vector(my.mat))
scatterplot3d
s3d.dat <- data.frame(cols=as.vector(col(my.mat)),
rows=as.vector(row(my.mat)),
value=as.vector(my.mat))
my.mat <- matrix(runif(25), nrow=5)
dimnames(my.mat) <- list(LETTERS[1:5], letters[11:15])
my.mat # the matrix we want to plot ...
s3d.dat <- data.frame(cols=as.vector(col(my.mat)),
rows=as.vector(row(my.mat)),
value=as.vector(my.mat))
View(s3d.dat)
View(d)
scatterplot3d(dat,type='h',lwd=5,pch="",color=rbc,box=F,
xlab = "row", ylab = "column", zlab = "Height",
y.ticklabs=unique(dat[,2]),x.ticklabs = unique(dat[,1]))
scatterplot3d(dat,type='h',lwd=5,pch="",color=rbc,box=F,
xlab = "row", ylab = "column", zlab = "Height",
y.ticklabs=unique(dat[,2]))
bar3d.ade(t(d), wall=6,
xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
par(las=2,cex=1.5)
bar3d.ade(t(d), wall=6,
xlab = "row", ylab = "column", zlab = "Height",zw=0.3)
install.packages("dplyr",repos="http://cran.us.r-project.org")
install.packages("hflights",repos="http://cran.us.r-project.org")
library(dplyr)
library(dplyr)
install.packages("dplyr",repos="http://cran.us.r-project.org")
install.packages("dplyr",repos="http://cran.us.r-project.org")
install.packages("dplyr",repos="http://cran.us.r-project.org")
install.packages("dplyr",repos="http://cran.us.r-project.org")
install.packages("dplyr",repos="http://cran.us.r-project.org")
library(shiny)
library(org.Hs.eg.db)
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("shiny-examples", "rstudio", subdir = "001-hello")
runExample("02_text")
entrezID=2
mget(entrezID, env= org.Hs.egGENENAME)
entrezID='2'
mget(entrezID, env= org.Hs.egGENENAME)
get(entrezID, env= org.Hs.egGENENAME)
runExample("02_text")
EntrezID2GeneSymbol=as.list(org.Hs.egSYMBOL)
head(EntrezID2GeneSymbol)
EntrezID2GeneSymbol=as.list(org.Hs.egSYMBOL)
GeneSymbol2EntrezID=tapply(unlist(EntrezID2GeneSymbol),unlist(EntrezID2GeneSymbol),function(x){names(x)})
EntrezID2Ensembl=as.list(org.Hs.egENSEMBL)
Ensembl2EntrezID=tapply(unlist(EntrezID2Ensembl),unlist(EntrezID2Ensembl),function(x){names(x)})
as.character(Ensembl2EntrezID[""])
head(Ensembl2EntrezID)
as.character(Ensembl2EntrezID["ENSG00000000460"])
as.data.frame()
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
？selectInput
?selectInput
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
runApp("my-test-shiny-ID-converter")
?selectInput
runApp("my-test-shiny-ID-converter")
get('2', env= org.Hs.egGENENAME)
entrezID=2
gname <- get(entrezID, env= org.Hs.egGENENAME)
gsymbol <- get(entrezID, env= org.Hs.egSYMBOL)
accnum <- get(entrezID, env= org.Hs.egREFSEQ)
pathways <- get(entrezID, env= org.Hs.egPATH)
gmap <- get(entrezID, env= org.Hs.egMAP)
entrezID='2'
entrezID=2
entrezID='2'
gname <- get(entrezID, env= org.Hs.egGENENAME)
gsymbol <- get(entrezID, env= org.Hs.egSYMBOL)
accnum <- get(entrezID, env= org.Hs.egREFSEQ)
pathways <- get(entrezID, env= org.Hs.egPATH)
gmap <- get(entrezID, env= org.Hs.egMAP)
outTable=as.data.frame(type=c("entrezID","gname","gsymbol","accnum","pathways","gmap"),
value=c(entrezID,gname,gsymbol,accnum,pathways,gmap))
outTable=data.frame(type=c("entrezID","gname","gsymbol","accnum","pathways","gmap"),
value=c(entrezID,gname,gsymbol,accnum,pathways,gmap))
runApp("my-test-shiny-ID-converter")
runExample("02_text")
runApp("my-test-shiny-ID-converter")
runExample("11_timer")
runApp("my-test-shiny-ID-converter")
d=matrix(abs(rnorm(120)),ncol = 6)
rownames(d)=LETTERS[1:20]
colnames(d)=LETTERS[21:26]
dat=melt(d)
library(reshape2)
d=matrix(abs(rnorm(120)),ncol = 6)
rownames(d)=LETTERS[1:20]
colnames(d)=LETTERS[21:26]
dat=melt(d)
View(d)
apply(d,2,median)
for(i in ncol(d)){tmp=median(d[,1]);print(tmp)}
library(org.Hs.eg.db)
tmp=toTable()
tmp=toTable(org.Hs.egGO)
View(tmp)
View(tmp)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse ="|"),simplify =F))
head(new_tmp)
tmp[1]
new_tmp[1]
View(tmp)
new_tmp[2]
tmp[tmp[,1]==1,]
View(tmp)
EntrezID2GeneSymbol=as.list(org.Hs.egSYMBOL)
head(EntrezID2GeneSymbol)
GeneSymbol2EntrezID=tapply(unlist(EntrezID2GeneSymbol),unlist(EntrezID2GeneSymbol),function(x){names(x)})
head(GeneSymbol2EntrezID)
View(dat)
View(dat)
match_row=aggregate(dat,by=list(dat[,1]),max)
match_row=aggregate(dat,by=list(dat[,1]),max(dat[,3]))
str(dat)
match_row=aggregate(dat[,3],by=list(dat[,1]),max())
match_row=aggregate(dat[,3],by=list(unique(dat[,1])),max())
unique(dat[,1]
)
dat[,3]
match_row=aggregate(dat[,3],by=list(unique(dat[,1])),max)
match_row=aggregate(dat[,3],by=list(unique(dat[,1])),max)
match_row=aggregate(dat[,3],by=list(dat[,1]),max)
View(match_row)
View(match_row)
dat[dat[,1]=="A",]
library(reshape2)
d=matrix(abs(rnorm(120)),ncol = 6)
rownames(d)=LETTERS[1:20]
colnames(d)=LETTERS[21:26]
dat=melt(d)
View(d)
View(dat)
?dcast()
dcast(dat,Var2~Var1)
View(d)
dcast(dat,Var1~Var2)
tmp=dcast(dat,Var1~Var2)
rownames(tmp)=tmp[,1]
tmp=tmp[,-1]
View(tmp)
View(d)
x=runif(10)
y=runif(10)
S=cbind(x,y)                                 #得到2维的数组
rownames(S)=paste("Name",1:10,"")             #赋予名称，便于识别分类
out.dist=dist(S,method="euclidean")
S
?hclust
require(graphics)
dist(USArrests)
tmp=dist(USArrests)
hc <- hclust(dist(USArrests), "ave")
plot(hc)
hc <- hclust(dist(USArrests)^2, "cen")
memb <- cutree(hc, k = 10)
cent <- NULL
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
}
hc1 <- hclust(dist(cent)^2, method = "cen", members = table(memb))
opar <- par(mfrow = c(1, 2))
plot(hc,  labels = FALSE, hang = -1, main = "Original Tree")
plot(hc1, labels = FALSE, hang = -1, main = "Re-start from 10 clusters")
par(opar)
d
hc <- hclust(d, "ave")
plot(hc)
hc <- hclust(d, "ave")
d
dist(USArrests)
USArrests
library(ape)
library(XML)
library(RCurl)
library(dplyr)
psu_edu_url='http://www.personal.psu.edu/iua1/courses/2013-BMMB-597D.html';
wp=getURL(psu_edu_url)
wp
getHTMLLinks(wp)
psu_edu_links=getHTMLLinks(wp)
psu_edu_pdf=psu_edu_links[grepl(".pdf$",psu_edu_links,perl=T)]
psu_edu_pdf
library(org.Hs.eg.db)
tmp=toTable(org.Hs.egGO)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse ="|"),simplify =F))
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x}
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
View(tmp)
EG2Symbol=as.list(org.Hs.egSYMBOL)
Symbol2EG=tapply(unlist(EG2Symbol),unlist(EG2Symbol),function(x){names(x)})
library(shiny)
runApp(D:\\my_tutorial\\Lecture-04\\R\\my-test-shiny-ID-converter)
runApp("D:\\my_tutorial\\Lecture-04\\R\\my-test-shiny-ID-converter")
library(org.Hs.eg.db)
EG2Symbol=as.list(org.Hs.egSYMBOL)
Symbol2EG=tapply(unlist(EG2Symbol),unlist(EG2Symbol),function(x){names(x)})
head(EG2Symbol)
runApp("D:\\my_tutorial\\Lecture-04\\R\\my-test-shiny-ID-converter")
EG2Symbol['2']
get('entrezID'2', env= org.Hs.egGENENAME)[1]
get(2', env= org.Hs.egGENENAME)[1]
''
get('2', env= org.Hs.egGENENAME)[1]
get('2', env= org.Hs.egSYMBOL)[1]
get('2343423424', env= org.Hs.egSYMBOL)[1]
EG2Symbol['2343423424']
tmp=toTable(org.Hs.egGO)
View(tmp)
View(tmp)
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
head(EG2GO)
runApp("D:\\my_tutorial\\Lecture-04\\R\\my-test-shiny-ID-converter")
mget(entrezID, env= org.Hs.egGENENAME)[1]
entrezID='2'
mget(entrezID, env= org.Hs.egGENENAME)[1]
library("GOstats")
randomEGraph()
randomE
floor(runif(100,0,100)) + 1
floor(runif(100,0,1000)) + 1
floor(runif(1000,0,100)) + 1
floor(runif(1000,0,20000)) + 1
length(unique(floor(runif(1000,0,20000)) + 1))
library("GOstats")
library(org.Hs.eg.db)
tmp=toTable(org.Hs.egGO)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse ="|"),simplify =F))
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
GO2EG=tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
head(
EG2GO
)
names(EG2GO)
diff_gene=names(EG2GO)[unique(floor(runif(1000,0,20000)) + 1)]
head(
new_tmp
)
new_tmp[1]
diff_gene_go=new_tmp[diff_gene]
write.table(diff_gene_go,"diff_gene_go",quote = F)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse =" "),simplify =F))
tmp=toTable(org.Hs.egGO)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse =" "),simplify =F))
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
GO2EG=tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
diff_gene=names(EG2GO)[unique(floor(runif(1000,0,20000)) + 1)]
diff_gene_go=new_tmp[diff_gene]
write.table(diff_gene_go,"diff_gene_go",quote = F,sep="\t",col.names = F)
head(diff_gene_go)
head(diff_gene)
all_go_gene=names(EG2GO);
diff_gene=all_go_gene[unique(floor(runif(1000,0,18000)) + 1)]
tail(diff_gene)
diff_gene_go=new_tmp[diff_gene]
write.table(diff_gene_go,"diff_gene_go",quote = F,sep="\t",col.names = F)
GO2EG['GO:0005576']
GOES = c('BP','CC', 'MF');
annotationPKG='org.Hs.eg.db'
for (ontology in GOES) {
# perform enrichment test. locusid is DEGs
hyperG.params = new("GOHyperGParams", geneIds=diff_gene, universeGeneIds=NULL, annotation=annotationPKG,
ontology=ontology, pvalueCutoff=1, conditional = FALSE, testDirection = "over")
hyperG.results = hyperGTest(hyperG.params);
outHTMLname=paste("GO_",ontology,".enrichment.html",sep="")
htmlReport(hyperG.results, file=outHTMLname, summary.args=list("htmlLinks"=TRUE))
}
62/1109
N=18207
M=7
n=974
K=4
phyper(k-1,M, N-M, n, lower.tail=FALSE)
N=18207
M=7
n=974
k=4
phyper(k-1,M, N-M, n, lower.tail=FALSE)
N=18207
M=107
n=974
k=11
phyper(k-1,M, N-M, n, lower.tail=FALSE)
N=18207
M=107
n=974
k=11
phyper(k-1,M, N-M, n, lower.tail=T)
N=18207
M=107
n=974
k=11
phyper(k-1,M, N-M, n, lower.tail=F)
n*M/N
N=18207 # all genes
M=247   #go genes
n=974   #diff genes
k=24
phyper(k-1,M, N-M, n, lower.tail=F)
n*M/N
diff_gene_go
diff_gene
library(XML)
tmp=summary(hyperG.results)
dim(tmp)
Term('GO:0048895')
GO2
GO2EG['']
GO2EG['GO:0048895']
head(GO2EG)
GO2EG['GO:0000014']
GO2EG['GO:0023061']
GO2EG['GO:0045736']
length(GO2EG)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse =" "),simplify =F))
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
GO2EG=tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
length(GO2EG)
tmp=toTable(org.Hs.egGO)
new_tmp=unlist(tapply(tmp[,2],as.factor(tmp[,1]),function(x) paste(x,collapse =" "),simplify =F))
EG2GO=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
GO2EG=tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
length(GO2EG)
head(tmp)
length(unique(tmp[,2]))
tmp=toTable(org.Hs.egPATH)
hea(tmp)
head(tmp)
diff_gene
hyperG.params = new("KEGGHyperGParams", geneIds=diff_gene, universeGeneIds=NULL, annotation=annotationPKG,
categoryName="KEGG", pvalueCutoff=1, testDirection = "over")
KEGG.hyperG.results = hyperGTest(hyperG.params);
htmlReport(KEGG.hyperG.results, file="kegg.enrichment.html", summary.args=list("htmlLinks"=TRUE))
head(tmp)
GeneID2Path=as.list(org.Hs.egPATH)
Path2GeneID=as.list(org.Hs.egPATH2EG)
head(Path2GeneID)
head(GeneID2Path)
head(names(Path2GeneID))
length(Path2GeneID[['04610']])
length(GeneID2Path)
length(na.omit(GeneID2Path))
head(tmp)
GeneID2Path=tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)
Path2GeneID=tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
diff_gene_has_path=intersect(diff_gene,names(GeneID2Path))
GeneID2Path[1]
"00232" %in% GeneID2Path[1]
"00232" %in% GeneID2Path[[1]]
diff_gene_has_path=intersect(diff_gene,names(GeneID2Path))
n=length(diff_gene_has_path)
N=length(GeneID2Path)
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (%in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="\t"))
}
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (j %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="\t"))
}
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (j %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
}
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (i %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
}
diff_gene
N
n
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (i %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
}
head(tmp)
phyper
N=18207 # all genes
M=247   #go genes
n=974   #diff genes
k=24
phyper(k-1,M, N-M, n, lower.tail=F)
choos(k,M)
choose(k,M)
?choose
head(tmp)
write.table(tmp,"gene-and-pathway.txt",col.names = F,row.names = F,quote = F)
write.table(diff_gene,"diff_gene_list.txt",,col.names = F,row.names = F,quote = F)
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (i %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
}
oppition
options(digits = 4)
for (i in names(Path2GeneID)){
M=length(Path2GeneID[[i]])
exp_count=n*M/N
k=0
for (j in diff_gene_has_path){
if (i %in% GeneID2Path[[j]]) k=k+1
}
OddsRatio=k/exp_count
p=phyper(k-1,M, N-M, n, lower.tail=F)
print(paste(i,p,OddsRatio,exp_count,k,M,sep="    "))
}
head(tmp)
app_dir="D:\\my_tutorial\\补\\wego-web-app\\third-version";
runApp(app_dir)
library(shiny)
app_dir="D:\\my_tutorial\\补\\wego-web-app\\third-version";
runApp(app_dir)
